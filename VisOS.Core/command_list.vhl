var funcList[512];
#include "../VisOS.Driver/VisOS.Terminal/out.vhl"
#include "../VisOS.Utility/memory.vhl"

private var FindCommand(var cmdPtr)
{
	var current = 0;
	var len = size_of(funcList);
	while(current < len)
	{
		var checkPtr = funcList[current];

		var found = checkPtr(cmdPtr);

		if(found)
		{
			return current+1;
		}
		current = current + 2;
	}
	return 0;
}

public void InsertCommand(var funcPtr, var checkPtr)
{
	var current = 0;
	while(current < size_of(funcList))
	{
		var entry = funcList[current];
		if(!entry)
		{
			funcList[current] = checkPtr;
			var funcIndex = current+1;
			funcList[funcIndex] = funcPtr;
			return;
		}
		current = current + 2;
	}
	return;
}

public void InvokeCommand(var cmdPtr)
{
	var cmdIndex = FindCommand(cmdPtr);
	if(cmdIndex)
	{
		var ptr = funcList[cmdIndex];

		var argStart = FirstIndex(cmdPtr, 255, 0x20);
		var end = IndexOf(cmdPtr, argStart, 255, 0x00);
		ptr(cmdPtr+argStart+1, end-argStart-1);
	}
	return;
}