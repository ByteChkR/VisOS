#include "VisOS.Driver/console.vhl"
#include "utils/error_handler.vhl"

uint MANAGED_END;
uint MAX_ALLOCATIONS;
uint MANAGED_START;

uint CUR_ALLOCS;
uint CUR_ALLOC_TABLE_START = 0x1FFFE;
uint CUR_START;


//Debug Strings
uint ENABLE_DEBUG = 0;
string(TXT_DEBUG_TAG, "[MMGR] ");
string(TXT_CURRENT_ALLOCS, "Current Allocations: ");
string(TXT_DEALLOC, "Deallocating: ");
string(TXT_ALLOC, "Allocating: ");
string(TXT_ALLOC_SIZE, "Size: ");

string(ERR_OUT_OF_MEM, "Out of Memory Error.");

string(INIT_MSTART, "Managed Start: ");
string(INIT_MEND, "Managed End: ");
string(INIT_MAXALLOC, "Max Allocations: ");
string(INIT_TSTART, "Allocation Table Start: ");
string(INIT_CUR_START, "Allocation Store Start: ");

public class MMGR
{
	public static void ToggleDebug(uint enable)
	{
		ENABLE_DEBUG = enable;
		return;
	}

	public static uint AllocCount()
	{
		return CUR_ALLOCS;
	}


	private static void WriteDebugString(uint ptr, uint size)
	{
		if(ENABLE_DEBUG)
		{
			uint lastFore = Console.GetForeColor();
			Console.SetForeColor(12);
			Console.WriteString(ptr, size);
			Console.SetForeColor(lastFore);
		}
		return;
	}

	private static void WriteDebugLine(uint ptr, uint size)
	{
		if(ENABLE_DEBUG)
		{
			uint lastFore = Console.GetForeColor();
			Console.SetForeColor(12);
			Console.WriteLine(ptr, size);
			Console.SetForeColor(lastFore);
		}
		return;
	}

	private static void WriteDebugNum(uint num)
	{
		if(ENABLE_DEBUG)
		{
			uint lastFore = Console.GetForeColor();
			Console.SetForeColor(12);
			Console.WriteNumber(num);
			Console.SetForeColor(lastFore);
		}
		return;
	}

	private static void WriteDebugNewLine()
	{
		if(ENABLE_DEBUG)
		{
			uint lastFore = Console.GetForeColor();
			Console.SetForeColor(12);
			Console.WriteNewLine();
			Console.SetForeColor(lastFore);
		}
		return;
	}
	private static void WriteDebugAllocCount()
	{
		MMGR.WriteDebugString(&TXT_DEBUG_TAG, size_of(TXT_DEBUG_TAG));
		MMGR.WriteDebugString(&TXT_CURRENT_ALLOCS, size_of(TXT_CURRENT_ALLOCS));
		MMGR.WriteDebugNum(CUR_ALLOCS);
		MMGR.WriteDebugNewLine();
		return;
	}

	private static void WriteAllocData(uint index, uint ptr, uint len)
	{	
		uint idxPtr = index * 2;

		CUR_ALLOC_TABLE_START[idxPtr] = ptr;
		CUR_ALLOC_TABLE_START[idxPtr+1] = len;

		return;
	}

	private static void EraseAllocData(uint index)
	{	
		uint idxPtr = index * 2;

		CUR_ALLOC_TABLE_START[idxPtr] = 0;
		CUR_ALLOC_TABLE_START[idxPtr+1] = 0;


		return;
	}

	public static void Free(uint ptr)
	{
		if(!ptr)
		{
			return;
		}
		uint i = 0;
		while(i < MAX_ALLOCATIONS)
		{
			uint idx = i * 2;
			uint entry = CUR_ALLOC_TABLE_START[idx];

			if(ptr == entry)
			{
				MMGR.WriteDebugString(&TXT_DEBUG_TAG, size_of(TXT_DEBUG_TAG));
				MMGR.WriteDebugString(&TXT_DEALLOC, size_of(TXT_DEALLOC));
				MMGR.WriteDebugNum(entry);
				MMGR.WriteDebugNewLine();

				MMGR.WriteDebugString(&TXT_DEBUG_TAG, size_of(TXT_DEBUG_TAG));
				MMGR.WriteDebugString(&TXT_ALLOC_SIZE, size_of(TXT_ALLOC_SIZE));
				
				uint size=CUR_ALLOC_TABLE_START[idx+1];
				MMGR.WriteDebugNum(size);
				MMGR.WriteDebugNewLine();
				MMGR.EraseAllocData(i);

				CUR_ALLOCS--;
				return;
			}
			i++;
		}
		return;
	}


	public static uint GetPtrSize(uint ptr)
	{
		if(!ptr)
		{
			return 0;
		}
		uint i = 0;
		while(i < MAX_ALLOCATIONS)
		{
			uint idx = i * 2;
			uint entry = CUR_ALLOC_TABLE_START[idx];

			if(ptr == entry)
			{
				return CUR_ALLOC_TABLE_START[idx+1];
			}
			i++;
		}
		return 0;
	}

	public static uint IsPtr(uint ptr)
	{
		if(!ptr)
		{
			return 0;
		}
		uint i = 0;
		while(i < MAX_ALLOCATIONS)
		{
			uint idx = i * 2;
			uint entry = CUR_ALLOC_TABLE_START[idx];

			if(ptr == entry)
			{
				return 1;
			}
			i++;
		}
		return 0;
	}

	public static uint Alloc(uint size)
	{
		uint cur = CUR_START;
		uint end = cur + size;
		if(end > MANAGED_END)
		{

			_ERROR_T(&ERR_OUT_OF_MEM, size_of(ERR_OUT_OF_MEM));
			
			return;
		}
		MMGR.WriteAllocData(CUR_ALLOCS, cur, size);
		CUR_ALLOCS++;

		MMGR.WriteDebugString(&TXT_DEBUG_TAG, size_of(TXT_DEBUG_TAG));
		MMGR.WriteDebugString(&TXT_ALLOC, size_of(TXT_ALLOC));
		MMGR.WriteDebugNum(cur);
		MMGR.WriteDebugNewLine();
		
		MMGR.WriteDebugString(&TXT_DEBUG_TAG, size_of(TXT_DEBUG_TAG));
		MMGR.WriteDebugString(&TXT_ALLOC_SIZE, size_of(TXT_ALLOC_SIZE));
		MMGR.WriteDebugNum(size);
		MMGR.WriteDebugNewLine();
		MMGR.WriteDebugAllocCount();

		CUR_START += size;
		return cur;
	}


	public static void Initialize()
	{
		MANAGED_END = 0x3FFFC;
		MAX_ALLOCATIONS = 0x1000;
		MANAGED_START = 0x1FFFE;
		CUR_ALLOCS = 0;
		CUR_ALLOC_TABLE_START = MANAGED_START;
		CUR_START = MANAGED_START + MAX_ALLOCATIONS * 2;

		MMGR.WriteDebugString(&TXT_DEBUG_TAG, size_of(TXT_DEBUG_TAG));
		MMGR.WriteDebugString(&INIT_MSTART, size_of(INIT_MSTART));
		MMGR.WriteDebugNum(MANAGED_START);
		MMGR.WriteDebugNewLine();

		MMGR.WriteDebugString(&TXT_DEBUG_TAG, size_of(TXT_DEBUG_TAG));
		MMGR.WriteDebugString(&INIT_MEND, size_of(INIT_MEND));
		MMGR.WriteDebugNum(MANAGED_END);
		MMGR.WriteDebugNewLine();

		MMGR.WriteDebugString(&TXT_DEBUG_TAG, size_of(TXT_DEBUG_TAG));
		MMGR.WriteDebugString(&INIT_MAXALLOC, size_of(INIT_MAXALLOC));
		MMGR.WriteDebugNum(MAX_ALLOCATIONS);
		MMGR.WriteDebugNewLine();

		MMGR.WriteDebugString(&TXT_DEBUG_TAG, size_of(TXT_DEBUG_TAG));
		MMGR.WriteDebugString(&INIT_TSTART, size_of(INIT_TSTART));
		MMGR.WriteDebugNum(CUR_ALLOC_TABLE_START);
		MMGR.WriteDebugNewLine();

		MMGR.WriteDebugString(&TXT_DEBUG_TAG, size_of(TXT_DEBUG_TAG));
		MMGR.WriteDebugString(&INIT_CUR_START, size_of(INIT_CUR_START));
		MMGR.WriteDebugNum(CUR_START);
		MMGR.WriteDebugNewLine();

		
		return;
	}
}
