var funcList;
var funcListSize;

#include "../VisOS.Driver/cout.vhl"
#include "../utils/memory.vhl"
#include "../mmgr.vhl"

string(txt_init, "Initializing Command System..");
string(DEBUG_TAG, "[CMD] ");
string(txt_invoke, "Running Command: ");
string(txt_found, "Found Command: ");
string(txt_not_found, "Could not find Command.");

public void CMD_InitCommandList()
{
	funcListSize = 512;
	COUT_WriteString(&DEBUG_TAG, size_of(DEBUG_TAG));
	COUT_WriteLine( &txt_init, size_of(txt_init));
	if(funcList)
	{
		MMGR_Free(funcList);
	}
	funcList = MMGR_Alloc(funcListSize);
	MEM_Set( funcList, funcListSize, 0);
	return;
}

public void CMD_UnloadCommandList()
{
	MMGR_Free(funcList);
	funcList = 0;
	return;
}

private var FindCommand(var cmdPtr)
{
	
	var current = 0;
	var len = funcListSize;
	while(current < len)
	{
		var checkPtr = funcList[current];
		if(checkPtr)
		{
			var found = checkPtr(cmdPtr);

			if(found)
			{
				return current+1;
			}
		}
		current += 2;
	}
	COUT_WriteString(&DEBUG_TAG, size_of(DEBUG_TAG));
	COUT_WriteLine( &txt_not_found, size_of(txt_not_found));
	return 0;
}

public void CMD_InsertCommand(var funcPtr, var checkPtr)
{
	var current = 0;
	while(current < funcListSize)
	{
		var entry = funcList[current];
		if(!entry)
		{
			funcList[current] = checkPtr;
			var funcIndex = current+1;
			funcList[funcIndex] = funcPtr;
			return;
		}
		current += 2;
	}
	return;
}

public void CMD_InvokeCommand(var cmdPtr, var cmdLen)
{
	var cmdIndex = FindCommand(cmdPtr);
	if(cmdIndex)
	{
		var ptr = funcList[cmdIndex];

		COUT_WriteString(&DEBUG_TAG, size_of(DEBUG_TAG));
		COUT_WriteString( &txt_invoke, size_of(txt_invoke));
		COUT_WriteNumber(ptr);
		COUT_WriteNewLine();

		var argStart = MEM_FirstIndex(cmdPtr, 255, 0x20);
		var sta = argStart+1;

		ptr(cmdPtr+sta, cmdLen - sta);
	}
	return;
}