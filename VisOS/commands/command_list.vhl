uint funcList;
uint funcListSize;

#include "../VisOS.Driver/console.vhl"
#include "../utils/memory.vhl"
#include "../mmgr.vhl"

string(txt_init, "Initializing Command System..");
string(DEBUG_TAG, "[CMD] ");
string(txt_invoke, "Running Command: ");
string(txt_found, "Found Command: ");
string(txt_not_found, "Could not find Command.");

public static void CMD_InitCommandList()
{
	funcListSize = 512;
	Console.WriteString(&DEBUG_TAG, size_of(DEBUG_TAG));
	Console.WriteLine( &txt_init, size_of(txt_init));
	if(funcList)
	{
		MMGR.Free(funcList);
	}
	funcList = MMGR.Alloc(funcListSize);
	Memory.Set( funcList, funcListSize, 0);
	return;
}

public static void CMD_UnloadCommandList()
{
	MMGR.Free(funcList);
	funcList = 0;
	return;
}

private static uint FindCommand(uint cmdPtr)
{
	
	uint current = 0;
	uint len = funcListSize;
	while(current < len)
	{
		uint checkPtr = funcList[current];
		if(checkPtr)
		{
			uint found = checkPtr(cmdPtr);

			if(found)
			{
				return current+1;
			}
		}
		current += 2;
	}
	Console.WriteString(&DEBUG_TAG, size_of(DEBUG_TAG));
	Console.WriteLine( &txt_not_found, size_of(txt_not_found));
	return 0;
}

public static void CMD_InsertCommand(uint funcPtr, uint checkPtr)
{
	uint current = 0;
	while(current < funcListSize)
	{
		uint entry = funcList[current];
		if(!entry)
		{
			funcList[current] = checkPtr;
			uint funcIndex = current+1;
			funcList[funcIndex] = funcPtr;
			return;
		}
		current += 2;
	}
	return;
}

public static void CMD_InvokeCommand(uint cmdPtr, uint cmdLen)
{
	uint cmdIndex = FindCommand(cmdPtr);
	if(cmdIndex)
	{
		uint ptr = funcList[cmdIndex];

		Console.WriteString(&DEBUG_TAG, size_of(DEBUG_TAG));
		Console.WriteString( &txt_invoke, size_of(txt_invoke));
		Console.WriteNumber(ptr);
		Console.WriteNewLine();

		uint argStart = Memory.FirstIndex(cmdPtr, 255, 0x20);
		uint sta = argStart+1;

		ptr(cmdPtr+sta, cmdLen - sta);
	}
	return;
}