
public class Memory
{
	public static uint IndexOf(uint source, uint start, uint length, uint num)
	{
		uint i = start;
		while(i < length)
		{
			if(source[i] == num)
			{
				return i;
			}
			i++
		} 

		return i;
	}

	public static uint FirstIndex(uint source, uint length, uint num)
	{
		return Memory.IndexOf(source, 0, length, num);
	}

	public static uint Compare(uint source, uint length, uint destination)
	{	
		uint i = length;
		while(i)
		{
			i--;
			uint tmpdst = destination[i];
			if(tmpdst != source[i])
			{	
				return 0;
			}
		}
		return 1;
	}


	public static void Copy(uint source, uint length, uint destination)
	{
		uint i = length;
		while(i)
		{
			i--;
			uint temp = source[i];
			destination[i] = temp;
		}
		return;
	}

	public static void CopyReverse(uint source, uint length, uint destination)
	{
		uint i = length;
		while(i)
		{
			i--;
			uint temp = source[i];
			uint newIndex = length-i;
			newIndex--;
			destination[newIndex] = temp;
		}
		return;
	}

	public static void Set(uint source, uint length, uint value)
	{
		uint i = length;
		while(i)
		{
			i--;
			source[i] = value;
		}
		return;
	}

}

