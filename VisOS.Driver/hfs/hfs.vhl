#import "vasm-bridge HLT"
#import "vasm-bridge BRK"

#include "hfs_commands.vhl"
#include "../console/console.vhl"
#include "../structures/mmgr.vhl"


private static string HFS_TXT_PATCH_LEN1 = "Patching ";
private static string HFS_TXT_PATCH_LEN2 = " indices";
private static string HFS_TXT_VERSION = "Loading Version: ";
private static string HFS_TXT_SYMBOLS_NOT_SUPPORTED = "Loading Symbols is not supported with this Format.";
private static string DEBUG_TAG = "[HFS_DEV]";

// Status IDS
private const uint HFS_STATUS_READY = 0x01;
private const uint HFS_STATUS_FILE_OPEN = 0x02;

// ADDRESSES
private const uint HFS_ADDRESS_PRESENT = 0xFFFF3000;
private const uint HFS_ADDRESS_STATUS = 0xFFFF3001;
private const uint HFS_ADDRESS_DATA = 0xFFFF3002;
private const uint HFS_ADDRESS_CMD = 0xFFFF3003;

public class HFS
{
	public static uint GetStatus()
	{
		uint v = HFS_ADDRESS_PRESENT;
		if(!v)
		{
			return 0;
		}
		v = HFS_ADDRESS_STATUS;
		return v;
	}

	public static uint FileReadByte()
	{
		uint v = HFS_ADDRESS_DATA;
		return v;
	}

	public static void FileWriteByte(uint data)
	{
		HFS_ADDRESS_DATA = data;
		return;
	}

	private static void  SetCommand(uint command)
	{
		uint v = HFS.GetStatus();
		if(!v)
		{
			return;
		}
		HFS_ADDRESS_CMD = command;
		return;
	}

	private static void WriteData(uint data, uint length)
	{
		uint v = HFS.GetStatus();
		if(!v)
		{
			return;
		}
		uint i = 0;
		while(i < length)
		{
			uint d = data[i];
			HFS.FileWriteByte(d);
			i++;
		}
		return;
	}

	private static void ReadData(uint data, uint length)
	{
		uint v = HFS.GetStatus();
		if(!v)
		{
			return;
		}
		uint i = 0;
		while(i < length)
		{
			data[i] = HFS.FileReadByte();
			i++;
		}
		return;
	}


	public static uint GetFileSize(uint path, uint pathLen)
	{
		HFS.WriteData(path, pathLen);
		HFS.SetCommand( HFSCommands.GetFileSize() );
		return HFS.FileReadByte();
	}

	private static void LoadSymbols(uint path, uint pathLen)
	{
		HFS.WriteData(path, pathLen);
		HFS.SetCommand( HFSCommands.LoadSymbols() );
		return;
	}

	public static uint FileExists(uint path, uint pathLen)
	{
		HFS.WriteData(path, pathLen);
		HFS.SetCommand( HFSCommands.FileExists() );
		return HFS.FileReadByte();
	}

	public static void FileOpenRead(uint path, uint pathLen)
	{
		HFS.WriteData(path, pathLen);
		HFS.SetCommand( HFSCommands.OpenRead() );
		return;
	}

	public static void FileOpenWrite(uint path, uint pathLen)
	{
		HFS.WriteData(path, pathLen);
		HFS.SetCommand( HFSCommands.OpenWrite() );
		return;
	}

	public static void FileClose()
	{
		HFS.SetCommand( HFSCommands.Close() );
		return;
	}

	public static void WriteAllData(uint path, uint pathLen, uint data, uint dataLen)
	{
		HFS.WriteData(path, pathLen);
		HFS.SetCommand( HFSCommands.OpenWrite() );
		HFS.WriteData(data, dataLen);
		HFS.SetCommand( HFSCommands.Close() );
		return;
	}

	public static void ChangeDirectory(uint path, uint pathLen)
	{
		HFS.WriteData(path, pathLen);
		HFS.SetCommand( HFSCommands.ChangeDir() );
		return;
	}

	public static void CreateDirectory(uint path, uint pathLen)
	{
		HFS.WriteData(path, pathLen);
		HFS.SetCommand( HFSCommands.MakeDir() );
		return;
	}

	public static void DeleteFile(uint path, uint pathLen)
	{
		HFS.WriteData(path, pathLen);
		HFS.SetCommand( HFSCommands.Delete() );
		return;
	}

	public static void ReadAllData(uint path, uint pathLen, uint data, uint dataLen)
	{
		HFS.FileOpenRead(path, pathLen);
		HFS.ReadData(data, dataLen);
		HFS.SetCommand( HFSCommands.Close() );
		return;
	}

	public static uint GetBinaryVersion(uint path, uint pathLen)
	{
		HFS.FileOpenRead(path, pathLen);
		
		uint nop = HFS_ADDRESS_DATA; //Read First Byte (Allways 0)

		if(nop)
		{
			return 0;
		}

		uint version = HFS_ADDRESS_DATA; //Read Version Byte (V2 = 1)

		HFS.SetCommand( HFSCommands.Close() );

		return version;

	}

	public static uint LoadBinaryPIC(uint path, uint pathLen)
	{
		uint length = HFS.GetFileSize(path, pathLen); //Get Size

		HFS.FileOpenRead(path, pathLen);

		uint nop = HFS_ADDRESS_DATA; //Read First Byte (Allways 0)

		uint version = HFS_ADDRESS_DATA; //Read Version Byte (V1 = 1)

		if(version != 2)
		{
			interrupt(1);
			return 0;
		}

		uint listLength = HFS_ADDRESS_DATA; //Read List Length

		uint unused = HFS_ADDRESS_DATA; //Read Unused Byte (Should be 0)


		length -= 4;
		length -= listLength;

		uint destinationAddr = MMGR.Alloc(length);

		for(uint i = 0; i < listLength; i++)
		{
			uint index = HFS_ADDRESS_DATA;
			destinationAddr[index] = destinationAddr;
		}

		for(uint i = 0; i < length; i++)
		{
			uint val = destinationAddr[i];

			uint newVal = val + HFS_ADDRESS_DATA;

			destinationAddr[i] = newVal;
		}

		HFS.SetCommand( HFSCommands.Close() );

		return destinationAddr;
	}

	private static uint LoadBinaryOffset(uint path, uint pathLen)
	{
		uint length = HFS.GetFileSize(path, pathLen); //Get Size

		HFS.FileOpenRead(path, pathLen);

		uint nop = HFS_ADDRESS_DATA; //Read First Byte (Allways 0)

		uint version = HFS_ADDRESS_DATA; //Read Version Byte (V1 = 1)

		if(version != 1)
		{
			interrupt(1);
			return 0;
		}

		length = length - 4;

		uint data = HFS_ADDRESS_DATA; //Address

		uint unused = HFS_ADDRESS_DATA; //Read Unused Byte (Should be 0)

		uint i = 0;
		while(i < length)
		{
			data[i] = HFS_ADDRESS_DATA;
			i++;
		}
		HFS.SetCommand( HFSCommands.Close() );
		return data;
	}


	public static uint LoadBinary(uint path, uint pathLen)
	{
		uint version = HFS.GetBinaryVersion(path, pathLen);
		uint retVal = 0;
		if(version == 1)
		{
			retVal = HFS.LoadBinaryOffset(path, pathLen);
			HFS.LoadSymbols(path, pathLen);
		}
		else if(version == 2)
		{
			Console.WriteString(&DEBUG_TAG, size_of(DEBUG_TAG));
			Console.WriteLine(&HFS_TXT_SYMBOLS_NOT_SUPPORTED, size_of(HFS_TXT_SYMBOLS_NOT_SUPPORTED));
			retVal = HFS.LoadBinaryPIC(path, pathLen);
		}
		else
		{
			interrupt(0);
		}
		return retVal;
	}	
}
