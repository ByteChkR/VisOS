#import "vasm-bridge HLT"
#import "vasm-bridge BRK"

#include "cout.vhl"

private static string HFS_TXT_PATCH_LEN1 = "Patching ";
private static string HFS_TXT_PATCH_LEN2 = " indices";
private static string HFS_TXT_VERSION = "Loading Version: ";
private static string HFS_TXT_SYMBOLS_NOT_SUPPORTED = "Loading Symbols is not supported with this Format.";
private static string DEBUG_TAG = "[HFS_DEV]";

// Status IDS
private const uint HFS_STATUS_READY = 0x01;
private const uint HFS_STATUS_FILE_OPEN = 0x02;

// ADDRESSES
private const uint HFS_ADDRESS_PRESENT = 0xFFFF3000;
private const uint HFS_ADDRESS_STATUS = 0xFFFF3001;
private const uint HFS_ADDRESS_DATA = 0xFFFF3002;
private const uint HFS_ADDRESS_CMD = 0xFFFF3003;

// COMMANDS
private const uint HFS_DEVICE_RESET = 0x00;
private const uint HFS_OPEN_READ = 0x01;
private const uint HFS_OPEN_WRITE = 0x02;
private const uint HFS_CLOSE = 0x03;
private const uint HFS_FILE_SIZE = 0x04;
private const uint HFS_CHANGE_DIR = 0x05;
private const uint HFS_CURRENT_DIR = 0x06;
private const uint HFS_MAKE_DIR = 0x07;
private const uint HFS_FILE_DELETE = 0x08;
private const uint HFS_GET_FILES_NUM = 0x09;
private const uint HFS_GET_FILES = 0x0A;
private const uint HFS_FILE_EXIST = 0x0B;
private const uint HFS_LOAD_SYMBOLS = 0x0C;




public uint HFS_GetStatus()
{
	uint v = HFS_ADDRESS_PRESENT;
	if(!v)
	{
		return 0;
	}
	v = HFS_ADDRESS_STATUS;
	return v;
}

public uint HFS_FileReadByte()
{
	uint v = HFS_ADDRESS_DATA;
	return v;
}

public void HFS_FileWriteByte(uint data)
{
	HFS_ADDRESS_DATA = data;
	return;
}

private void HFS_SetCommand(uint command)
{
	uint v = HFS_GetStatus();
	if(!v)
	{
		return;
	}
	HFS_ADDRESS_CMD = command;
	return;
}

private void HFS_WriteData(uint data, uint length)
{
	uint v = HFS_GetStatus();
	if(!v)
	{
		return;
	}
	uint i = 0;
	while(i < length)
	{
		uint d = data[i];
		HFS_FileWriteByte(d);
		i++;
	}
	return;
}

private void HFS_ReadData(uint data, uint length)
{
	uint v = HFS_GetStatus();
	if(!v)
	{
		return;
	}
	uint i = 0;
	while(i < length)
	{
		data[i] = HFS_FileReadByte();
		i++;
	}
	return;
}


public uint HFS_GetFileSize(uint path, uint pathLen)
{
	HFS_WriteData(path, pathLen);
	HFS_SetCommand( &HFS_FILE_SIZE );
	return HFS_FileReadByte();
}

private void HFS_LoadSymbols(uint path, uint pathLen)
{
	HFS_WriteData(path, pathLen);
	HFS_SetCommand( &HFS_LOAD_SYMBOLS );
	return;
}

public uint HFS_FileExists(uint path, uint pathLen)
{
	HFS_WriteData(path, pathLen);
	HFS_SetCommand( &HFS_FILE_EXIST);
	return HFS_FileReadByte();
}

public void HFS_FileOpenRead(uint path, uint pathLen)
{
	HFS_WriteData(path, pathLen);
	HFS_SetCommand( &HFS_OPEN_READ );
	return;
}

public void HFS_FileOpenWrite(uint path, uint pathLen)
{
	HFS_WriteData(path, pathLen);
	HFS_SetCommand( &HFS_OPEN_WRITE );
	return;
}

public void HFS_FileClose()
{
	HFS_SetCommand( &HFS_CLOSE );
	return;
}

public void HFS_WriteAllData(uint path, uint pathLen, uint data, uint dataLen)
{
	HFS_WriteData(path, pathLen);
	HFS_SetCommand( &HFS_OPEN_WRITE );
	HFS_WriteData(data, dataLen);
	HFS_SetCommand( &HFS_CLOSE );
	return;
}

public void HFS_ChangeDirectory(uint path, uint pathLen)
{
	HFS_WriteData(path, pathLen);
	HFS_SetCommand( &HFS_CHANGE_DIR);
	return;
}

public void HFS_CreateDirectory(uint path, uint pathLen)
{
	HFS_WriteData(path, pathLen);
	HFS_SetCommand( &HFS_MAKE_DIR);
	return;
}

public void HFS_DeleteFile(uint path, uint pathLen)
{
	HFS_WriteData(path, pathLen);
	HFS_SetCommand( &HFS_FILE_DELETE );
	return;
}

public void HFS_ReadAllData(uint path, uint pathLen, uint data, uint dataLen)
{
	HFS_WriteData(path, pathLen);
	HFS_SetCommand( &HFS_OPEN_READ );
	HFS_ReadData(data, dataLen);
	HFS_SetCommand( &HFS_CLOSE );
	return;
}


private uint HFS_LoadBinaryV2(uint length)
{
	uint data = HFS_ADDRESS_DATA; //Read first value(the start pointer)

	uint unused = HFS_ADDRESS_DATA; //Read Unused Byte (Should be 0)

	length = length - 4;

	uint i = 0;
	while(i < length)
	{
		data[i] = HFS_ADDRESS_DATA;
		i++;
	}
	HFS_SetCommand( &HFS_CLOSE );
	return data;
}

public uint HFS_LoadBinaryV3(uint destinationAddr, uint length)
{
	uint listLength = HFS_ADDRESS_DATA; //Read List Length


	Console.WriteString(&DEBUG_TAG, size_of(DEBUG_TAG));
	Console.WriteString(&HFS_TXT_PATCH_LEN1, size_of(HFS_TXT_PATCH_LEN1));
	Console.WriteNumber(listLength);
	Console.WriteLine(&HFS_TXT_PATCH_LEN2, size_of(HFS_TXT_PATCH_LEN2));

	uint unused = HFS_ADDRESS_DATA; //Read Unused Byte (Should be 0)

	length -= 4;
	length -= listLength;

	for(uint i = 0; i < listLength; i++)
	{
		uint index = HFS_ADDRESS_DATA;
		destinationAddr[index] = destinationAddr;
	}

	for(uint i = 0; i < length; i++)
	{
		uint val = destinationAddr[i];

		uint newVal = val + HFS_ADDRESS_DATA;

		destinationAddr[i] = newVal;
	}

	HFS_SetCommand( &HFS_CLOSE );

	return destinationAddr;
}


public uint HFS_LoadBinary(uint path, uint pathLen)
{
	HFS_WriteData(path, pathLen);
	HFS_SetCommand( &HFS_FILE_SIZE );
	uint length = HFS_ADDRESS_DATA; //Get Size

	HFS_WriteData(path, pathLen);
	HFS_SetCommand( &HFS_OPEN_READ );
	
	uint nop = HFS_ADDRESS_DATA; //Read First Byte (Allways 0)

	uint version = HFS_ADDRESS_DATA; //Read Version Byte (V1 = 1)

	uint retVal = 0;

	Console.WriteString(&DEBUG_TAG, size_of(DEBUG_TAG));
	Console.WriteString(&HFS_TXT_VERSION, size_of(HFS_TXT_VERSION));
	Console.WriteNumber(version);
	Console.WriteNewLine();

	if(version == 1)
	{
		retVal = HFS_LoadBinaryV2(length);
		HFS_LoadSymbols(path, pathLen);
	}
	else if(version == 2)
	{
		Console.WriteString(&DEBUG_TAG, size_of(DEBUG_TAG));
		Console.WriteLine(&HFS_TXT_SYMBOLS_NOT_SUPPORTED, size_of(HFS_TXT_SYMBOLS_NOT_SUPPORTED));
		retVal = HFS_LoadBinaryV3(60000, length);
	}
	else
	{
		interrupt(0);
	}
	return retVal;
}
