
#include "VisOS.Driver/console/console.vhl"
#include "VisOS.Driver/hfs/hfs.vhl"
#include "VisOS.Driver/time/time.vhl"
#include "VisOS.Driver/tests/test_device.vhl"
#include "VisOS.Driver/error/error_handler.vhl"
#include "VisOS.Driver/benchmarks/benchmark_device.vhl"

#import "vasm-bridge BRK"

//The Boot Image to Load
private static string bootimage = "../VisOS/Core.vbin";

//Boot Loader Strings

private static string ldr_version = "v0.1";
private static string ldr_name = "BootLoader";
private static string DEBUG_TAG = "[BLDR] ";

private static string txt_pre_load = "Preparing to load Image: ";
private static string txt_loading = "Loading";
private static string txt_loading_bin_ver = "Version: ";
private static string txt_bytes= "Bytes";
private static string txt_complete= "Complete";
private static string txt_error= "Error: File not Found";
private static string txt_starting= "Starting Image...";
private static string txt_ending= "Exited Image!";

public class BootLoader
{
	public static void PrintHeader()
	{
		Console.WriteString(&DEBUG_TAG, size_of(DEBUG_TAG));
		Console.WriteString(&ldr_name, size_of(ldr_name));
		Console.Write(0x20);
		Console.WriteLine( &ldr_version, size_of(ldr_version));
		return;
	}

	public static void WritePreLoadText(uint version)
	{
		Console.WriteString(&DEBUG_TAG, size_of(DEBUG_TAG));
		Console.WriteString( &txt_pre_load, size_of(txt_pre_load));
		Console.WriteLine( &bootimage, size_of(bootimage));

		Console.WriteString(&DEBUG_TAG, size_of(DEBUG_TAG));
		Console.WriteString( &txt_loading_bin_ver, size_of(txt_loading_bin_ver));
		Console.WriteNumberLine( version );

		return;
	}

	public static uint LoadImage()
	{
		uint version = HFS.GetBinaryVersion(&bootimage, size_of(bootimage));

		BootLoader.WritePreLoadText(version);
		uint size = HFS.GetFileSize( &bootimage, size_of(bootimage));
		Console.WriteString(&DEBUG_TAG, size_of(DEBUG_TAG));
		Console.WriteString( &txt_loading , size_of(txt_loading));
		Console.Write(0x20);
		Console.WriteNumber(size * 4);
		Console.Write(0x20);
		Console.WriteLine( &txt_bytes, size_of(txt_bytes));
		
		uint entryPtr = HFS.LoadBinary(&bootimage, size_of(bootimage));
		
		Console.WriteString(&DEBUG_TAG, size_of(DEBUG_TAG));
		Console.WriteString( &txt_loading, size_of(txt_loading));
		Console.Write(0x20);
		Console.WriteLine(&txt_complete, size_of(txt_complete));
		return entryPtr;
	}

	public static void Entry()
	{
		MMGR.ToggleDebug(0);
		MMGR.Initialize();
		Console.SetForeColor(ConsoleColors.Cyan());
		BootLoader.PrintHeader();
		uint exists = HFS.FileExists( &bootimage, size_of(bootimage));
		if(exists)
		{
			uint ptr = BootLoader.LoadImage();
			Console.WriteString(&DEBUG_TAG, size_of(DEBUG_TAG));
			Console.WriteLine( &txt_starting, size_of(txt_starting));


			Console.SetForeColor(ConsoleColors.Green()); //Green
			ptr();


			Console.SetForeColor(ConsoleColors.Cyan()); //Blue
			Console.WriteString(&DEBUG_TAG, size_of(DEBUG_TAG));
			Console.WriteLine( &txt_ending, size_of(txt_ending));

			return;
		}
		Console.SetForeColor(ConsoleColors.Red()); //Red
		Console.WriteString(&DEBUG_TAG, size_of(DEBUG_TAG));
		Console.WriteLine( &txt_error, size_of(txt_error));
		interrupt(1);
		return;
	}
}


BootLoader.Entry();
